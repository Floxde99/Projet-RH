{% extends "../layouts/base.twig" %}

{% block style %}
<!-- Ajout des styles MapLibre -->
<link href="https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.css" rel="stylesheet" />
<style>
  #map {
    width: 100%;
    height: 400px;
    border-radius: 0.5rem;
    margin-top: 1rem;
    position: relative; /* Ajout important */
  }
  .marker {
    background-image: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="%230ea5e9" stroke="%23ffffff" stroke-width="2"><rect x="4" y="5" width="16" height="14" rx="2"/><line x="9" y="2" x2="15" y2="2"/><line x1="12" y1="14" x2="12" y2="14"/><line x1="12" y1="18" x2="12" y2="18"/></svg>');
    background-size: cover;
    width: 30px;
    height: 30px;
    cursor: pointer;
  }
  .geocoding-status {
    font-size: 0.875rem;
    margin-top: 0.5rem;
  }
  .geocoding-loading {
    color: #f59e0b;
  }
  .geocoding-success {
    color: #10b981;
  }
  .geocoding-error {
    color: #ef4444;
  }
</style>
{% endblock %}

{% block main %}
<div class="min-h-screen flex flex-col">
  <!-- Tabs -->
  <div class="tabs tabs-boxed mb-6">
    <button class="tab tab-active" onclick="switchTab('employees')">Employés</button>
    <button class="tab" onclick="switchTab('computers')">Ordinateurs</button>
  </div>

  <!-- Employees Section -->
  <div id="employees-tab" class="flex-1">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Liste des employés</h2>
      <label for="add-employee-modal" class="btn btn-primary">Ajouter un employé</label>
    </div>
    
    <div class="overflow-x-auto">
      <table class="table table-zebra w-full">
        <thead>
          <tr>
            <th>Nom</th>
            <th>Prénom</th>
            <th>Email</th>
            <th>Âge</th>
            <th>Genre</th>
            <th>Ordinateur</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {% if employes %}
            {% for employe in employes %}
            <tr>
              <td>{{ employe.lastname }}</td>
              <td>{{ employe.firstName }}</td>
              <td>{{ employe.mail }}</td>
              <td>{{ employe.birthDate ? ((("now"|date("Y")) - (employe.birthDate|date("Y"))) ~ " ans") : "-" }}</td>
              <td>{{ employe.gender ? employe.gender : "-" }}</td>
              <td>{{ employe.computer ? employe.computer.macAddress : "Non assigné" }}</td>
              <td class="flex gap-2">
                <label for="edit-employee-modal-{{ employe.id }}" class="btn btn-sm btn-outline">Modifier</label>
                <button class="btn btn-sm btn-error" onclick="confirmDelete('employee', {{ employe.id }})">Supprimer</button>
              </td>
            </tr>
            {% endfor %}
          {% else %}
            <tr><td colspan="7" class="text-center py-4">Aucun employé trouvé</td></tr>
          {% endif %}
        </tbody>
      </table>
    </div>
  </div>

  <!-- Computers Section -->
  <div id="computers-tab" class="hidden flex-1">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-2xl font-bold">Liste des ordinateurs</h2>
      <label for="add-computer-modal" class="btn btn-primary">Ajouter un ordinateur</label>
    </div>
    
    <div class="overflow-x-auto">
      <table class="table table-zebra w-full">
        <thead>
          <tr>
            <th>Adresse MAC</th>
            <th>Adresse physique</th>
            <th>Employé assigné</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {% if computers %}
            {% for computer in computers %}
            <tr>
              <td>{{ computer.macAddress }}</td>
              <td>{{ computer.address ? computer.address : "Non renseignée" }}</td>
              <td>
                {% if computer.employe %}
                  {{ computer.employe.firstName }} {{ computer.employe.lastname }}
                {% else %}
                  <label for="assign-computer-modal-{{ computer.id }}" class="btn btn-xs btn-outline">Assigner</label>
                {% endif %}
              </td>
              <td class="flex gap-2">
                <label for="edit-computer-modal-{{ computer.id }}" class="btn btn-sm btn-outline">Modifier</label>
                <button class="btn btn-sm btn-error" onclick="confirmDelete('computer', {{ computer.id }})">Supprimer</button>
                {% if computer.employe %}
                  <button class="btn btn-sm btn-warning" onclick="unassignComputer({{ computer.id }})">Désassigner</button>
                {% endif %}
              </td>
            </tr>
            {% endfor %}
          {% else %}
            <tr><td colspan="4" class="text-center py-4">Aucun ordinateur trouvé</td></tr>
          {% endif %}
        </tbody>
      </table>
    </div>
    
    <!-- Ajout de la carte MapLibre -->
    <div class="mt-8 bg-base-200 p-4 rounded-box">
      <h3 class="text-xl font-bold mb-2">Localisation des ordinateurs</h3>
      <div id="map" class="shadow-lg"></div>
    </div>
  </div>
</div>

<!-- Add Employee Modal -->
<input type="checkbox" id="add-employee-modal" class="modal-toggle" />
<div class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg">Ajouter un employé</h3>
    <form action="/employe/create" method="POST" class="py-4">
      <div class="form-control">
        <label for="add-lastname" class="label">Nom</label>
        <input type="text" name="lastname" id="add-lastname" class="input input-bordered" required />
      </div>
      <div class="form-control">
        <label for="add-firstName" class="label">Prénom</label>
        <input type="text" name="firstName" id="add-firstName" class="input input-bordered" required />
      </div>
      <div class="form-control">
        <label for="add-mail" class="label">Email</label>
        <input type="email" name="mail" id="add-mail" class="input input-bordered" required />
      </div>
      <div class="form-control">
        <label for="add-password" class="label">Mot de passe</label>
        <input type="password" name="password" id="add-password" class="input input-bordered" required />
      </div>
      <div class="form-control">
        <label for="add-birthDate" class="label">Date de naissance</label>
        <input type="date" name="birthDate" id="add-birthDate" class="input input-bordered" />
      </div>
      <div class="form-control">
        <label for="add-gender" class="label">Genre</label>
        <select name="gender" id="add-gender" class="select select-bordered">
          <option value="">Sélectionner</option>
          <option value="M">Homme</option>
          <option value="F">Femme</option>
          <option value="O">Autre</option>
        </select>
      </div>
      <input type="hidden" name="businessOwnerId" value="{{ user.id }}" />
      <div class="modal-action">
        <button type="submit" class="btn btn-primary">Enregistrer</button>
        <label for="add-employee-modal" class="btn">Annuler</label>
      </div>
    </form>
  </div>
</div>

<!-- Add Computer Modal -->
<input type="checkbox" id="add-computer-modal" class="modal-toggle" />
<div class="modal">
  <div class="modal-box">
    <h3 class="font-bold text-lg">Ajouter un ordinateur</h3>
    <form action="/computer/create" method="POST" class="py-4" onsubmit="return handleComputerForm(this)">
      <div class="form-control">
        <label for="add-macAddress" class="label">Adresse MAC</label>
        <input type="text" name="macAddress" id="add-macAddress" class="input input-bordered" required pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$" title="Format valide: AA:BB:CC:DD:EE:FF" />
      </div>
      <div class="form-control">
        <label for="add-address" class="label">Adresse physique</label>
        <input type="text" name="address" id="add-address" class="input input-bordered" placeholder="Ex: 123 Rue de la Paix, 75001 Paris" />
        <div id="add-geocoding-status" class="geocoding-status"></div>
      </div>
      <input type="hidden" name="latitude" id="add-latitude" />
      <input type="hidden" name="longitude" id="add-longitude" />
      <div class="modal-action">
        <button type="submit" class="btn btn-primary" id="add-submit-btn">Enregistrer</button>
        <label for="add-computer-modal" class="btn">Annuler</label>
      </div>
    </form>
  </div>
</div>

<!-- Edit Computer Modals -->
{% if computers %}
  {% for computer in computers %}
  <input type="checkbox" id="edit-computer-modal-{{ computer.id }}" class="modal-toggle" />
  <div class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Modifier l'ordinateur</h3>
      <form action="/computer/update/{{ computer.id }}" method="POST" class="py-4" onsubmit="return handleComputerForm(this)">
        <div class="form-control">
          <label for="edit-macAddress-{{ computer.id }}" class="label">Adresse MAC</label>
          <input type="text" name="macAddress" id="edit-macAddress-{{ computer.id }}" class="input input-bordered" required value="{{ computer.macAddress }}" pattern="^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$" title="Format valide: AA:BB:CC:DD:EE:FF" />
        </div>
        <div class="form-control">
          <label for="edit-address-{{ computer.id }}" class="label">Adresse physique</label>
          <input type="text" name="address" id="edit-address-{{ computer.id }}" class="input input-bordered" value="{{ computer.address }}" placeholder="Ex: 123 Rue de la Paix, 75001 Paris" />
          <div id="edit-geocoding-status-{{ computer.id }}" class="geocoding-status"></div>
        </div>
        <input type="hidden" name="latitude" id="edit-latitude-{{ computer.id }}" value="{{ computer.latitude }}" />
        <input type="hidden" name="longitude" id="edit-longitude-{{ computer.id }}" value="{{ computer.longitude }}" />
        <div class="modal-action">
          <button type="submit" class="btn btn-primary" id="edit-submit-btn-{{ computer.id }}">Mettre à jour</button>
          <label for="edit-computer-modal-{{ computer.id }}" class="btn">Annuler</label>
        </div>
      </form>
    </div>
  </div>
  {% endfor %}
{% endif %}

<!-- Assign Computer Modals -->
{% if computers %}
  {% for computer in computers %}
  {% if not computer.employe %}
  <input type="checkbox" id="assign-computer-modal-{{ computer.id }}" class="modal-toggle" />
  <div class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Assigner un employé</h3>
      <form action="/computer/assign/{{ computer.id }}" method="POST" class="py-4">
        <div class="form-control">
          <label for="assign-employeId-{{ computer.id }}" class="label">Sélectionner un employé</label>
          <select name="employeId" id="assign-employeId-{{ computer.id }}" class="select select-bordered" required>
            <option value="">Sélectionner un employé</option>
            {% for employe in employes %}
              {% if not employe.computer %}
                <option value="{{ employe.id }}">{{ employe.firstName }} {{ employe.lastname }}</option>
              {% endif %}
            {% endfor %}
          </select>
        </div>
        <div class="modal-action">
          <button type="submit" class="btn btn-primary">Assigner</button>
          <label for="assign-computer-modal-{{ computer.id }}" class="btn">Annuler</label>
        </div>
      </form>
    </div>
  </div>
  {% endif %}
  {% endfor %}
{% endif %}

<!-- Edit Employee Modals -->
{% if employes %}
  {% for employe in employes %}
  <input type="checkbox" id="edit-employee-modal-{{ employe.id }}" class="modal-toggle" />
  <div class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">Modifier l'employé</h3>
      <form action="/employe/update/{{ employe.id }}" method="POST" class="py-4">
        <div class="form-control">
          <label for="edit-lastname-{{ employe.id }}" class="label">Nom</label>
          <input type="text" name="lastname" id="edit-lastname-{{ employe.id }}" class="input input-bordered" required value="{{ employe.lastname }}" />
        </div>
        <div class="form-control">
          <label for="edit-firstName-{{ employe.id }}" class="label">Prénom</label>
          <input type="text" name="firstName" id="edit-firstName-{{ employe.id }}" class="input input-bordered" required value="{{ employe.firstName }}" />
        </div>
        <div class="form-control">
          <label for="edit-mail-{{ employe.id }}" class="label">Email</label>
          <input type="email" name="mail" id="edit-mail-{{ employe.id }}" class="input input-bordered" required value="{{ employe.mail }}" />
        </div>
        <div class="form-control">
          <label for="edit-birthDate-{{ employe.id }}" class="label">Date de naissance</label>
          <input type="date" name="birthDate" id="edit-birthDate-{{ employe.id }}" class="input input-bordered" value="{{ employe.birthDate|date('Y-m-d') }}" />
        </div>
        <div class="form-control">
          <label for="edit-gender-{{ employe.id }}" class="label">Genre</label>
          <select name="gender" id="edit-gender-{{ employe.id }}" class="select select-bordered">
            <option value="">Sélectionner</option>
            <option value="M" {% if employe.gender == 'M' %}selected{% endif %}>Homme</option>
            <option value="F" {% if employe.gender == 'F' %}selected{% endif %}>Femme</option>
            <option value="O" {% if employe.gender == 'O' %}selected{% endif %}>Autre</option>
          </select>
        </div>
        <div class="modal-action">
          <button type="submit" class="btn btn-primary">Mettre à jour</button>
          <label for="edit-employee-modal-{{ employe.id }}" class="btn">Annuler</label>
        </div>
      </form>
    </div>
  </div>
  {% endfor %}
{% endif %}

<script>
  // Fonction de géocodage
  async function geocodeAddress(address) {
    try {
      const response = await fetch(`https://api.maptiler.com/geocoding/${encodeURIComponent(address)}.json?key=yhVb4pKbizkKPSbF1Ohr`);
      const data = await response.json();
      
      if (data.features && data.features.length > 0) {
        const coordinates = data.features[0].center;
        return {
          success: true,
          longitude: coordinates[0],
          latitude: coordinates[1],
          displayName: data.features[0].place_name
        };
      } else {
        return {
          success: false,
          error: 'Adresse non trouvée'
        };
      }
    } catch (error) {
      return {
        success: false,
        error: 'Erreur lors de la géolocalisation'
      };
    }
  }

  // Gestion du formulaire d'ordinateur
  async function handleComputerForm(form) {
    const addressInput = form.querySelector('input[name="address"]');
    const latitudeInput = form.querySelector('input[name="latitude"]');
    const longitudeInput = form.querySelector('input[name="longitude"]');
    const submitBtn = form.querySelector('button[type="submit"]');
    const statusDiv = form.querySelector('.geocoding-status');
    
    // Si pas d'adresse, on laisse passer
    if (!addressInput.value.trim()) {
      return true;
    }
    
    // Empêcher la soumission pendant le géocodage
    event.preventDefault();
    
    // Afficher le statut de chargement
    statusDiv.innerHTML = '<span class="geocoding-loading">🔄 Géolocalisation en cours...</span>';
    submitBtn.disabled = true;
    
    // Géocoder l'adresse
    const result = await geocodeAddress(addressInput.value);
    
    if (result.success) {
      latitudeInput.value = result.latitude;
      longitudeInput.value = result.longitude;
      statusDiv.innerHTML = `<span class="geocoding-success">✅ Position trouvée: ${result.displayName}</span>`;
      
      // Soumettre le formulaire
      setTimeout(() => {
        form.submit();
      }, 1000);
    } else {
      statusDiv.innerHTML = `<span class="geocoding-error">❌ ${result.error}</span>`;
      submitBtn.disabled = false;
    }
    
    return false;
  }

  function switchTab(tab) {
    document.getElementById('employees-tab').classList.add('hidden');
    document.getElementById('computers-tab').classList.add('hidden');
    document.getElementById(tab + '-tab').classList.remove('hidden');
    
    // Update active tab
    const tabs = document.querySelectorAll('.tab');
    tabs.forEach(t => t.classList.remove('tab-active'));
    if (tab === 'employees') {
      tabs[0].classList.add('tab-active');
    } else {
      tabs[1].classList.add('tab-active');
    }
  }
  
  // Vérifier l'onglet actif depuis l'URL lors du chargement initial
  document.addEventListener('DOMContentLoaded', function() {
    // Récupérer le paramètre tab de l'URL
    const urlParams = new URLSearchParams(window.location.search);
    const activeTab = urlParams.get('tab');
    
    // Si le paramètre existe, activer l'onglet correspondant
    if (activeTab === 'computers') {
      switchTab('computers');
    }
  });
  
  function confirmDelete(type, id) {
    if (confirm(`Êtes-vous sûr de vouloir supprimer cet élément ?`)) {
      window.location.href = `/${type}/delete/${id}`;
    }
  }
  
  function unassignComputer(id) {
    if (confirm(`Êtes-vous sûr de vouloir désassigner cet ordinateur ?`)) {
      window.location.href = `/computer/unassign/${id}`;
    }
  }
</script>
<script src="https://unpkg.com/maplibre-gl@3.6.2/dist/maplibre-gl.js"></script>
<script>
  // Variable globale pour suivre l'initialisation de la carte
  let mapInitialized = false;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Vérifier d'abord si nous sommes sur l'onglet des ordinateurs
    const urlParams = new URLSearchParams(window.location.search);
    const activeTab = urlParams.get('tab');
    
    if (activeTab === 'computers') {
      switchTab('computers');
      // Initialiser la carte avec un délai pour s'assurer que l'élément est visible
      setTimeout(initMap, 200);
    }
    
    // Fonction pour initialiser la carte
    function initMap() {
      console.log("Tentative d'initialisation de la carte...");
      
      // Vérifier que la carte n'est pas déjà initialisée
      if (mapInitialized) {
        console.log("Carte déjà initialisée, annulation.");
        return;
      }
      
      // Vérifier que l'élément map est visible
      const mapElement = document.getElementById('map');
      if (!mapElement || mapElement.offsetParent === null) {
        console.log("Élément map non visible, annulation.");
        return;
      }
      
      try {
        console.log("Création de la carte...");
        
        // Utiliser un style de carte plus simple sans terrain
        const map = new maplibregl.Map({
          container: 'map',
          style: 'https://api.maptiler.com/maps/hybrid/style.json?key=yhVb4pKbizkKPSbF1Ohr', // Style hybride satellite + routes
          center: [2.3488, 48.8534], // Paris par défaut
          zoom: 12,
          pitch: 0, // Désactiver l'inclinaison
          antialias: true,
          terrain: false // Désactiver explicitement le terrain
        });
        
        // Ajouter un gestionnaire d'erreurs
        map.on('error', function(e) {
          console.error('Erreur MapLibre:', e.error);
        });
        
        // Ne continuer qu'après le chargement complet de la carte
        map.on('load', function() {
          // Ajouter les contrôles de navigation
          map.addControl(new maplibregl.NavigationControl());
          
          // Créer un objet bounds pour stocker les limites de tous les marqueurs
          const bounds = new maplibregl.LngLatBounds();
          let hasValidCoordinates = false;
          
          // Ajouter des marqueurs pour chaque ordinateur
          {% if computers %}
            {% for computer in computers %}
            (function() { // Créer un nouveau scope pour chaque ordinateur
              let lng, lat;
              
              {% if computer.latitude and computer.longitude %}
                // Utiliser les vraies coordonnées
                lng = {{ computer.longitude }};
                lat = {{ computer.latitude }};
                console.log("Ajout d'un marqueur avec coordonnées:", lat, lng);
                // Étendre les limites pour inclure ce point
                bounds.extend([lng, lat]);
                hasValidCoordinates = true;
              {% else %}
                // Coordonnées fictives pour les ordinateurs sans adresse
                lng = 2.3488 + (Math.random() - 0.5) * 0.05;
                lat = 48.8534 + (Math.random() - 0.5) * 0.05;
                // On n'étend pas les limites avec les points fictifs
              {% endif %}
              
              // Créer un élément HTML personnalisé pour le marqueur
              const el = document.createElement('div');
              el.className = 'marker';
              
              // Ajouter un popup avec les informations de l'ordinateur
              const popup = new maplibregl.Popup({ offset: 25 })
                .setHTML(`
                  <h3 class="font-bold">Ordinateur</h3>
                  <p><strong>MAC:</strong> {{ computer.macAddress }}</p>
                  {% if computer.adress %}
                    <p><strong>Adresse:</strong> {{ computer.adress }}</p>
                  {% endif %}
                  {% if computer.latitude and computer.longitude %}
                    <p><strong>Coordonnées:</strong> ${lat.toFixed(5)}, ${lng.toFixed(5)}</p>
                  {% endif %}
                  {% if computer.employe %}
                    <p><strong>Utilisé par:</strong> {{ computer.employe.firstName }} {{ computer.employe.lastname }}</p>
                  {% else %}
                    <p><strong>Statut:</strong> Non assigné</p>
                  {% endif %}
                `);
              
              // Ajouter le marqueur à la carte
              new maplibregl.Marker(el)
                .setLngLat([lng, lat])
                .setPopup(popup)
                .addTo(map);
            })(); // Fin de la fonction auto-invoquée
            {% endfor %}
          {% endif %}
          
          // Ajuster la vue de la carte pour inclure tous les marqueurs avec coordonnées réelles
          if (hasValidCoordinates) {
            try {
              console.log("Ajustement des limites de la carte...");
              
              // Si un seul point, utiliser setCenter au lieu de fitBounds
              if (bounds._ne && bounds._sw && 
                  bounds._ne.lng === bounds._sw.lng && 
                  bounds._ne.lat === bounds._sw.lat) {
                console.log("Un seul point détecté, centrage direct");
                map.setCenter([bounds._ne.lng, bounds._ne.lat]);
                map.setZoom(15);
              } else {
                map.fitBounds(bounds, {
                  padding: 50,
                  maxZoom: 15,
                  duration: 1000
                });
              }
            } catch (error) {
              console.error("Erreur lors de l'ajustement des limites:", error);
              // Fallback: centrer sur Paris
              map.setCenter([2.3488, 48.8534]);
              map.setZoom(12);
            }
          } else {
            // S'il n'y a aucun point valide, centrer sur Paris
            console.log("Aucune coordonnée valide, centrage sur Paris");
            map.setCenter([2.3488, 48.8534]);
            map.setZoom(12);
          }
          
          mapInitialized = true;
          console.log("Carte initialisée avec succès");
        });
      } catch (error) {
        console.error("Erreur lors de l'initialisation de la carte:", error);
      }
    }
    
    // Observer quand l'onglet des ordinateurs devient visible
    const originalSwitchTab = window.switchTab;
    window.switchTab = function(tab) {
      originalSwitchTab(tab);
      if (tab === 'computers') {
        console.log("Onglet ordinateurs activé, initialisation de la carte...");
        // Initialiser la carte quand on passe à l'onglet des ordinateurs
        setTimeout(initMap, 200); // Délai augmenté pour s'assurer que l'élément est visible
      }
    };
    
    // Exposer initMap globalement pour le débogage
    window.initMapManually = initMap;
  });
</script>
{% endblock %}
